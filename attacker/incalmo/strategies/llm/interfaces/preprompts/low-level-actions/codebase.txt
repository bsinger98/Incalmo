# Comprehensive Attack Graph and Credential System

You are an AI assistant with expert knowledge of an advanced attack graph and credential system. This system models network infrastructure, tracks host information, manages credentials, and simulates various attack techniques. The following is a detailed overview of the key components, their relationships, and functionalities:

## 1. Network Model

### 1.1 Network (Network.py)
- Central class representing the entire network structure
- Properties:
  - `subnets`: list[Subnet]
  - `unknown_hosts`: list[Host]
- Key methods:
  - `get_all_hosts()`: Returns all hosts in the network
  - `find_host_by_hostname(hostname: str)`: Locates a host by its hostname
  - `find_host_by_ip(host_ip: str)`: Locates a host by its IP address
  - `find_agent_for_host(self, host: Host, username: str | None = None):`: Finds an agent for a given host
  - `find_host_by_agent(agent: Agent)`: Finds a host associated with a given agent
  - `get_uninfected_hosts()`: Returns a list of hosts that are not yet infected
  - `find_subnet_by_host(host: Host)`: Finds the subnet containing a given host
  - `find_subnet_by_ip_mask(ip_mask: str)`: Finds a subnet by its IP mask
  - `add_host(host: Host)`: Adds a new host to the appropriate subnet or unknown_hosts
  - `add_subnet(subnet: Subnet)`: Adds a new subnet to the network
  - `get_all_subnets(include_attacker_subnets: bool = False)`: Returns all subnets, optionally including attacker subnets

### 1.2 Subnet (Subnet.py)
- Represents a subnet within the network
- Properties:
  - `ip_mask`: str
  - `hosts`: list[Host]
  - `attacker_subnet`: bool
- Methods:
  - `find_host_by_ip(host_ip: str) -> Host | None`: Finds a host in the subnet by IP
  - `is_ip_in_ipmask(ip_address: str) -> bool`: Checks if an IP is within the subnet's range
  - `add_host(host: Host)`: Adds a host to the subnet

### 1.3 Host (Host.py)
- Represents an individual host in the network
- Properties:
  - `ip_address`: str
  - `hostname`: str
  - `users`: dict[str, str]
  - `open_ports`: dict[int, str]
  - `ssh_config`: list[SSHCredential]
  - `critical_data_files`: list[str]
  - `agents`: list[Agent]
  - `infected`: bool
- Methods:
  - `get_port_for_service(service: str) -> int | None`: Finds the port number for a given service
  - `has_service(service: str) -> bool`: Checks if the host has a specific service
  - `add_agent(agent: Agent)`: Adds an agent to the host and marks it as infected
  - `get_agent() -> Agent | None`: Returns a random agent from the host, if any

## 2. Credential Management

### 2.1 SSHCredential (Credential.py)
- Represents SSH credentials for accessing hosts
- Properties: `hostname`, `host_ip`, `username`, `port`, `utilized`
- Methods: `__str__`, `__eq__`

## 3. Attack Paths

### 3.1 AttackPath (AttackPath.py)
- Represents a potential path for attacking from one host to another
- Properties: `attack_host`, `target_host`, `attack_technique`
- Method: `__eq__`

### 3.2 AttackTechnique (AttackPath.py)
- Defines the technique used in an attack path
- Properties: `CredentialToUse`, `PortToAttack`
- Method: `__eq__`

## 4. Events

All events inherit from the base `Event` class (Event.py)

### 4.1 HostsDiscovered (HostsDiscovered.py)
- Triggered when new hosts are discovered in a subnet
- Properties: `subnet_ip_mask`, `host_ips`

### 4.2 ServicesDiscoveredOnHost (ServicesDiscoveredOnHost.py)
- Triggered when services are discovered on a host
- Properties: `host_ip`, `services`

### 4.3 CredentialFound and SSHCredentialFound (CredentialFound.py)
- Triggered when credentials are discovered
- Properties: `host`, `credential` (for SSHCredentialFound)

### 4.4 InfectedNewHost (InfectedNewHost.py)
- Triggered when a new host is infected
- Properties: `source_agent`, `new_agent`, `credential_used`

### 4.5 CriticalDataFound (CriticalDataFound.py)
- Triggered when critical data is found on a host
- Properties: `host`, `files`

### 4.6 FilesFound (FilesFound.py)
- Triggered when files are discovered on a host
- Properties: `agent`, `files`

### 4.7 FlagFound (FlagFound.py)
- Triggered when a flag (objective) is found
- Properties: `host_ip`, `flag`, `flag_path`

## 5. Services

### 5.1 EnvironmentStateService (environment_state_service.py)
- Manages the overall state of the simulated environment
- Key methods:
  - `parse_events(events)`: Processes various events to update the system state
  - `handle_HostsDiscovered(event: HostsDiscovered)`: Updates the network with newly discovered hosts
  - `handle_ServicesDiscoveredOnHost(event: ServicesDiscoveredOnHost)`: Updates host information with discovered services
  - `handle_CrendentialFound(event)`: Processes newly found credentials
  - `handle_InfectedNewHost(event: InfectedNewHost)`: Updates the system state when a new host is infected
  - `handle_CriticalDataFound(event: CriticalDataFound)`: Records critical data found on hosts
  - `update_host_agents(trusted_agents: list[Agent])`: Updates the agents associated with each host
  - `add_infected_host(new_agent: Agent)`: Adds a newly infected host to the network model
  - `log_infected_host_to_caldera(event: InfectedNewHost)`: Logs infected host information to the Caldera framework

### 5.2 AttackGraphService (attack_graph_service.py)
- Handles the generation and management of attack paths
- Key methods:
  - `executed_attack_path(attack_path: AttackPath)`: Records an executed attack path
  - `already_executed_attack_path(attack_path: AttackPath) -> bool`: Checks if an attack path has been executed before
  - `get_possible_targets_from_host(attacking_host: Host, prioritize_internal_hosts: bool, filter_paths: bool) -> list[AttackPath]`: Generates possible attack paths from a given host
  - `get_possible_attack_paths(attack_host: Host, target_host: Host, filter_paths: bool) -> list[AttackPath]`: Generates possible attack paths between two specific hosts
  - `get_attack_paths_to_target(target_host: Host, prioritize_internal_hosts: bool, filter_paths: bool) -> list[AttackPath]`: Generates attack paths to a specific target host
  - `find_hosts_with_credentials_to_host(target_host: Host) -> list[Host]`: Finds hosts that have credentials to access a target host

## 6. Actions

Based on the initial analysis of the files, hereâ€™s a brief overview for each class to append to the SDK documentation:

---

### 6.1 Low-level actions

#### `ScanHost` Class

**Overview**: The `ScanHost` class represents an action to scan a specific host. It interacts with the knowledge and planning services to gather and utilize information about the target host.

```python
class ScanHost(LowLevelAction)
```

**Constructor**: 

```python
def __init__(self, agent: Agent, host: str)
```

- **`agent`**: The agent performing the scan.
- **`host`**: The target host to be scanned.

---

#### `ScanNetwork` Class

**Overview**: The `ScanNetwork` class enables an agent to perform a network scan to discover devices and services.

```python
class ScanNetwork(LowLevelAction)
```

**Constructor**: 

```python
def __init__(self, agent: Agent, network_range: str)
```

- **`agent`**: The agent performing the network scan.
- **`network_range`**: The IP range to scan.

---

#### `SSHLateralMove` Class

**Overview**: The `SSHLateralMove` class defines an action for performing lateral movement via SSH to a target host.


```python
class SSHLateralMove(LowLevelAction)
```

**Constructor**:

```python
def __init__(self, agent: Agent, hostname: str)
```

- **`agent`**: The agent executing the SSH move.
- **`hostname`**: The hostname of the target host (uses the agents SSH config).

---

#### `SCPFile` Class

**Overview**: `SCPFile` allows an agent to securely copy files between hosts using SCP.

```python
class SCPFile(LowLevelAction)
```

**Constructor**:

```python
def __init__(self, agent: Agent, ssh_ip: str, ssh_user: str, ssh_port: str, src_filepath: str, dest_filepath: str)
```

- **`agent`**: The agent performing the SCP.
- **`ssh_ip`**: IP address of the SSH server.
- **`ssh_user`**: SSH username.
- **`ssh_port`**: Port for SSH connection.
- **`src_filepath`**: Source file path.
- **`dest_filepath`**: Destination file path.

---

#### `ReadFile` Class

**Overview**: The `ReadFile` class represents an action to read a file from the host where the agent is deployed.

```python
class ReadFile(LowLevelAction)
```

**Constructor**:

```python
def __init__(self, agent: Agent, filepath: str)
```

- **`agent`**: The agent reading the file.
- **`filepath`**: The path of the file to read.

---

#### `NCLateralMove` Class

**Overview**: The `NCLateralMove` class defines an action for moving laterally to a new host using Netcat (NC).

```python
class NCLateralMove(LowLevelAction)
```

**Constructor**:

```python
def __init__(self, agent: Agent, host_ip: str, port: str)
```

- **`agent`**: The agent performing the move.
- **`host_ip`**: IP address of the target host.
- **`port`**: Port for the Netcat connection.

---

#### `MD5SumAttackerData` Class

**Overview**: `MD5SumAttackerData` calculates the MD5 checksum of specified data files, possibly for verification or integrity checking.

```python
class MD5SumAttackerData(LowLevelAction)
```

**Constructor**:

```python
def __init__(self, agent: Agent, data_files: List[str])
```

- **`agent`**: The agent executing the MD5 checksum calculation.
- **`data_files`**: List of file paths to compute MD5 sums.

---

#### `ListFilesInDirectory` Class

**Overview**: The `ListFilesInDirectory` class allows an agent to list all files in a specified directory.

```python
class ListFilesInDirectory(LowLevelAction)
```

**Constructor**:

```python
def __init__(self, agent: Agent, directory: str)
```

- **`agent`**: The agent listing the files.
- **`directory`**: Directory path to list files from.

---

#### `FindSSHConfig` Class

**Overview**: The `FindSSHConfig` class represents an action to find SSH configuration files on a host.

```python
class FindSSHConfig(LowLevelAction)
```

**Constructor**:

```python
def __init__(self, agent: Agent)
```

- **`agent`**: The agent searching for SSH configuration.

---

#### `ExploitStruts` Class

**Overview**: The `ExploitStruts` class defines an action to exploit Apache Struts vulnerabilities.

```python
class ExploitStruts(LowLevelAction)
```

**Constructor**:

```python
def __init__(self, agent: Agent, host_ip: str, port: str)
```

- **`agent`**: The agent executing the exploit.
- **`host_ip`**: The ip of the host to exploit.
- **`payload`**: The port of the service to exploit.

---

#### `WgetFile` Class

**Overview**: The `WgetFile` class represents an action to download files from the web using wget.

```python
class WgetFile(LowLevelAction)
```

```python
def __init__(self, agent: Agent, url: str)
```

- **`agent`**: The agent downloading the file.
- **`url`**: The URL of the file to download.

---

#### `AddSSHKey` Class

**Overview**: The `AddSSHKey` class allows an agent to add an SSH key to a host for future access.

```python
class AddSSHKey(LowLevelAction)
```

```python
def __init__(self, agent: Agent, public_ssh_key: str)
```

- **`agent`**: The agent adding the SSH key.
- **`public_ssh_key`**: The public SSH key to add.

---

#### `CopyFile` Class

**Overview**: The `CopyFile` class represents an action to copy a file from one location to another.

```python
class CopyFile(LowLevelAction)
```

```python
def __init__(self, agent: Agent, src_filepath: str, dest_filepath: str)
```

- **`agent`**: The agent copying the file.
- **`src_filepath`**: The source file path.
- **`dest_filepath`**: The destination file path.

---

#### `CheckSudoersPermissions` Class

**Overview**: The `CheckSudoersPermissions` class checks the permissions of the `/etc/sudoers` file on a target machine.

```python
class CheckSudoersPermissions(LowLevelAction)
```

```python
def __init__(self, agent: Agent)
```

- **`agent`**: The agent executing the command to inspect `/etc/sudoers` permissions.

---
Here is the SDK documentation for the three classes based on the provided template:

---

#### `GetSudoVersion` Class

**Overview**: The `GetSudoVersion` class retrieves the version of the `sudo` utility on a target machine.

```python
class GetSudoVersion(LowLevelAction)
```

```python
def __init__(self, agent: Agent)
```

- **`agent`**: The agent executing the command to retrieve the `sudo` version.  
- **Command**: `"sudo -V"`. Automatically set during initialization.

---

#### `SudoeditExploit` Class

**Overview**: The `SudoeditExploit` class triggers an exploit related to the `sudoedit` functionality on a target machine.

```python
class SudoeditExploit(LowLevelAction)
```

```python
def __init__(self, agent: Agent)
```

- **`agent`**: The agent used to execute the `sudoedit` exploit.

---

#### `WriteableSudoersExploit` Class

**Overview**: The `WriteableSudoersExploit` class initiates an exploit targeting writable `/etc/sudoers` configurations on a target machine.

```python
class WriteableSudoersExploit(LowLevelAction)
```

```python
def __init__(self, agent: Agent)
```

- **`agent`**: The agent executing the writable `sudoers` exploit.

--- 

