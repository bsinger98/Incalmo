import asyncio

from app.service.knowledge_svc import KnowledgeService
from app.objects.c_operation import Operation
from app.service.planning_svc import PlanningService

from ..LowLevelAction import LowLevelAction
from plugins.deception.app.models.events import InfectedNewHost, Event
from plugins.deception.app.helpers.agent_helpers import get_trusted_agents
from app.objects.c_agent import Agent


class ExploitStruts(LowLevelAction):
    ability_name = "deception-struts"

    def __init__(
        self,
        agent: Agent,
        host_ip: str,
        port: str,
    ):
        facts = {
            "host.lateralMove.ip": host_ip,
            "host.lateralMove.port": port,
        }
        super().__init__(agent, facts, ExploitStruts.ability_name)

    # Lateral move action does not have any events
    async def get_result(
        self,
        operation: Operation,
        planner: PlanningService,
        knowledge_svc_handle: KnowledgeService,
        raw_result: dict | None = None,
    ) -> list[Event]:
        # sleep to allow for the agent to get to the new host
        await asyncio.sleep(10)
        return []
